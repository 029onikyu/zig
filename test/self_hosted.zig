// TODO '_' identifier for unused variable bindings
const test_array = @import("cases/array.zig");
const test_atomics = @import("cases/atomics.zig");
const test_bool = @import("cases/bool.zig");
const test_cast = @import("cases/cast.zig");
const test_const_slice_child = @import("cases/const_slice_child.zig");
const test_defer = @import("cases/defer.zig");
const test_enum = @import("cases/enum.zig");
const test_enum_with_members = @import("cases/enum_with_members.zig");
const test_error = @import("cases/error.zig");
const test_eval = @import("cases/eval.zig");
const test_fn = @import("cases/fn.zig");
const test_for = @import("cases/for.zig");
const test_generics = @import("cases/generics.zig");
const test_goto = @import("cases/goto.zig");
const test_if = @import("cases/if.zig");
const test_import = @import("cases/import.zig");
const test_ir_block_deps = @import("cases/ir_block_deps.zig");
const test_math = @import("cases/math.zig");
const test_misc = @import("cases/misc.zig");
const test_namespace_depends_on_compile_var = @import("cases/namespace_depends_on_compile_var/index.zig");
const test_null = @import("cases/null.zig");
const test_pub_enum = @import("cases/pub_enum/index.zig");
const test_sizeof_and_typeof = @import("cases/sizeof_and_typeof.zig");
const test_struct = @import("cases/struct.zig");
const test_struct_contains_slice_of_itself = @import("cases/struct_contains_slice_of_itself.zig");
const test_switch = @import("cases/switch.zig");
const test_switch_prong_err_enum = @import("cases/switch_prong_err_enum.zig");
const test_switch_prong_implicit_cast = @import("cases/switch_prong_implicit_cast.zig");
const test_this = @import("cases/this.zig");
const test_try = @import("cases/try.zig");
const test_typedef = @import("cases/typedef.zig");
const test_undefined = @import("cases/undefined.zig");
const test_var_args = @import("cases/var_args.zig");
const test_void = @import("cases/void.zig");
const test_while = @import("cases/while.zig");
