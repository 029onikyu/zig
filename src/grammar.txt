Root<node> : many(FnDecl) token(EOF) {
    $$ = ast_create_root($1);
};

FnDecl<node> : token(Fn) token(Symbol) token(LParen) list(ParamDecl, token(Comma)) token(RParen) token(Arrow) Type Block {
    $$ = ast_create_fn_decl($2, $4, $7, $8);
} | token(Fn) token(Symbol) token(LParen) list(ParamDecl, token(Comma)) token(RParen) Block {
    $$ = ast_create_void_fn_decl($2, $4, $6);
};

ParamDecl<node> : token(Symbol) token(Colon) Type {
    $$ = ast_create_param_decl($1, $2);
};

Type<node> : token(Symbol) {
    $$ = ast_create_symbol_type($1);
} | PointerType {
    $$ = $1;
};

PointerType<node> : token(Star) token(Const) Type {
    $$ = ast_create_pointer_type($2, $3);
} | token(Star) token(Mut) Type {
    $$ = ast_create_pointer_type($2, $3);
};

Block<node> : token(LBrace) many(Statement) Expression token(RBrace) {
    $$ = ast_create_expr_block($2, $3);
} | token(LBrace) many(Statement) token(RBrace) {
    $$ = ast_create_block($2);
};

Statement<node> : ExpressionStatement {
    $$ = $1;
} | ReturnStatement {
    $$ = $1;
};

ExpressionStatement<node> : Expression token(Semicolon) {
    $$ = ast_create_expression_statement($1);
};

ReturnStatement<node> : token(Return) Expression token(Semicolon) {
    $$ = ast_create_return_statement($2);
};

Expression<node> : token(Number) {
    $$ = ast_create_number($1);
} | token(String) {
    $$ = ast_create_string($1);
} | FnCall {
    $$ = $1;
};

FnCall<node> : token(Symbol) token(LParen) list(Expression, token(Comma)) token(RParen) {
    $$ = ast_create_fn_call($1, $3);
};
