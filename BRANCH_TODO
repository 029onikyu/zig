 * make sure that `zig cc -o hello hello.c -target native-native-musl` and `zig build-exe hello.zig -lc -target native-native-musl` will share the same libc build.
 * zig cc as a preprocessor (-E)
 * tests passing with -Dskip-non-native
 * `-ftime-report`
 *  -fstack-report               print stack size diagnostics\n"
 *  -fdump-analysis              write analysis.json file with type information\n"
 *  -femit-docs                  create a docs/ dir with html documentation\n"
 *  -fno-emit-docs               do not produce docs/ dir with html documentation\n"
 *  -femit-asm                   output .s (assembly code)\n"
 *  -fno-emit-asm                (default) do not output .s (assembly code)\n"
 *  -femit-llvm-ir               produce a .ll file with LLVM IR\n"
 *  -fno-emit-llvm-ir            (default) do not produce a .ll file with LLVM IR\n"
 * mingw-w64
 * MachO LLD linking
 * COFF LLD linking
 * WASM LLD linking
 * audit the CLI options for stage2
 * audit the base cache hash
 * On operating systems that support it, do an execve for `zig test` and `zig run` rather than child process.
 * restore error messages for stage2_add_link_lib
 * windows CUSTOMBUILD : error : unable to build compiler_rt: FileNotFound [D:\a\1\s\build\zig_install_lib_files.vcxproj]
 * try building some software with zig cc

 * implement proper parsing of clang stderr/stdout and exposing compile errors with the Compilation API
 * implement proper parsing of LLD stderr/stdout and exposing compile errors with the Compilation API
 * support cross compiling stage2 with `zig build`
 * implement proper compile errors for failing to build glibc crt files and shared libs
 * implement -fno-emit-bin
 * improve the stage2 tests to support testing with LLVM extensions enabled
 * implement emit-h in stage2
 * multi-thread building C objects
 * implement serialization/deserialization of incremental compilation metadata
 * incremental compilation - implement detection of which source files changed
 * improve the cache hash logic for c objects with respect to extra flags and file parameters
 * LLVM codegen backend: put a sub-arch in the triple in some cases
 * implement an LLVM backend for stage2
 * implement outputting dynamic libraries in self-hosted linker
 * implement outputting static libraries (archive files) in self-hosted linker
 * support linking against object files in self-hosted linker
 * avoid invoking lld when it's just 1 object file (the `zig cc -c` case)
 * `zig fmt --check` should output to stdout not stderr.
 * main.zig: If there was an argsAllocZ we could avoid this allocation
 * improve robustness of response file parsing
 * there are a couple panic("TODO") in clang options parsing
 * std.testing needs improvement to support exposing directory path for its tmp dir (look for "bogus")
 * integrate target features into building assembly code
 * libc_installation.zig: make it look for msvc only if msvc abi is chosen
 * switch the default C ABI for windows to be mingw-w64
 * change glibc log errors to normal exposed compile errors
 * improve Directory.join to only use 1 allocation in a clean way.
 * tracy builds with lc++
 * some kind of "zig identifier escape" function rather than unconditionally using @"" syntax
   in builtin.zig
 * rename std.builtin.Mode to std.builtin.OptimizeMode
 * implement `zig run` and `zig test` when combined with `--watch`
 * close the --pkg-begin --pkg-end Package directory handles
 * make std.Progress support multithreaded
 * update musl.zig static data to use native path separator in static data rather than replacing '/' at runtime
 * linking hello world with LLD, lld is silently calling exit(1) instead of reporting ok=false. when run standalone the error message is: ld.lld: error: section [index 3] has a sh_offset (0x57000) + sh_size (0x68) that is greater than the file size (0x57060)

